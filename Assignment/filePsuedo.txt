Author: Alec Maughan
Date: 9/5/19
Purpose: Handle file I/O for loading and saving ships

CLASS: File

    SUBMODULE: load
    IMPORT: fileName (String), Ships (ShipStorage)
    EXPORT: message (String)
    ASSERTION: Reads ships from file and adds them to storage
    ALGORITHM:
        fullLine (String) //Full line read from BufferedReader
        lineNum (integer) := 0 //Keeps track of current line for message etc.
        numLoaded (integer) := 0 //Number of ships loaded
        numErrors (integer) := 0 //Number of errors occured (Each has its 
            //own message)
        message (String) //Final message to return to UI
            //Contains no. of ships loaded/slots remaining and all errors
        TRY
            IF NOT fileName.contains<--".csv" THEN
                //If file is not a csv
                FAIL (IllegalArgument) (message: " for file name \"" +
                    fileName + "\": File must be a .csv" )
            ENDIF
            LOAD FILE fileName

            fullLine := READ LINE
            lineNum := lineNum + 1
            WHILE fullLine NOT EOF THEN //Checks for end of file
                TRY
                    loadLine<--Ships, fullLine
                    numLoaded := numLoaded + 1
                    //Processes the line and adds the ship to storage if
                    //there are no errors
                ENDTRY
                CATCH IllegalArgument
                    //Catches errors specific to the line that do not
                    //require file loading to stop alltogether
                    IF Ships.getSlots<--none EQUALS 0 THEN
                        //If error is that there are no ship slots left
                        //it is an error that must stop the file being read
                        //so error is thrown outside of file reading scope
                        CLOSE FILE
                        FAIL (IllegalArgument) (message: THROWN MESSAGE )
                    ENDIF
                    message := message + "Error on line " + lineNum + 
                        THROWN MESSAGE + ".\n"
                    numErrors := numErrors + 1
                    //Adds the error to the final returned message
                ENDCATCH
                fullLine := READ LINE
                lineNum := lineNum + 1
            ENDWHILE
            CLOSE FILE
        ENDTRY
        CATCH IllegalArgument
            //Errors that stop the file being loaded
            message := message + "Error" + THROWN MESSAGE + ".\n"
            numErrors := numErrors + 1
        CATCH FileNotFound
            message := "Error: File name \"" + fileName + "\" not found" + 
                NEWLINE
            numErrors := numErrors + 1
        CATCH IOException
            IF FILE OPEN THEN
                TRY
                    CLOSE FILE
                ENDTRY
                CATCH IOException
                    message := message + "Error on line " + lineNum +
                        ": Unknown error (Sorry). Line: \" " + fullLine +
                        " \". Messages: \"" + THROWN MESSAGE + "\", \"" +
                        THROWN MESSAGE 2 + "\"" + NEWLINE
                ENDCATCH
                message := message + "Error on line " + lineNum + 
                    ": Unknown error (Sorry). Line: \" " + fullLine +
                    " \". Message: \"" + THROWN MESSAGE + "\"" + NEWLINE
            ELSE
                message := message + "Error on line " + lineNum +
                    ": Unknown error (Sorry). Line: \" " + fullLine +
                    " \". Message: \"" + THROWN MESSAGE + "\"" + NEWLINE
            ENDIF
        ENCATCH

        IF numErrors > 0 AND numLoaded > 0 THEN
            message := numLoaded + " out of " + lineNum + 
                " ships loaded successfully. " + numErrors + 
                " error(s) found." + NEWLINE + message
        ELSE IF numErrors > 0 THEN
            message := "No ships loaded. " + numErrors + " error(s) found." + 
                NEWLINE + message
        ELSE IF numLoaded EQUALS 0 AND lineNum EQUALS 1 THEN
            //File was empty
            message = "No ships in file \"" + fileName + "\"." + NEWLINE
        ELSE
            message := numLoaded + " ships loaded successfully." + NEWLINE
        ENDIF
        message := message + Ships.slotsToString<--none
            //Message structure:
            //No. of ships loaded + no. of errors occured
            //Errors, one after the other
            //No. of ship slots remaining
    END SUBMODULE
    
    SUBMODULE: loadLine
    IMPORT: Ships (ShipStorage), fullLine (String)
    EXPORT: none
    ASSERTION: Saves a ship to storage from a line
    ALGORITHM:
        line (ARRAY OF String)
            //Array of ship elements: type, serial, year, cyl etc.
        TRY
            line := fullLine.split<--",", 7
            // Stops at ordncance to allow for commas
            IF line[0].equals<--"S" THEN
                CONSTRUCT sub (SubClass) USING default
                CONSTRUCT subEng (EngineClass) USING default
                sub.setSerial<--line[1]
                sub.setYear<--line[2]
                subEng.setCyl<--line[3]
                subEng.setFuel<--line[4]
                sub.setHull<--line[5]
                sub.setDepth<--line[6]
                sub.setEng<--subEng
                Ships.addShip<--sub
            ELSE IF line[0].equals<--"F" THEN
                CONSTRUCT jet (JetClass) USING default
                CONSTRUCT jetEng (EngineClass) USING default
                jet.setSerial<--line[1]
                jet.setYear<--line[2]
                jetEng.setCyl<--line[3]
                jetEng.setFuel<--line[4]
                jet.setWing<--line[5]
                jet.setOrdnance<--line[6]
                jet.setEng<--jetEng
                Ships.addShip<--jet
            ELSE
                //Line is not a submarine or a fighter jet
                FAIL (IllegalArgument) (message: "ship type := \"" + line[0] + 
                    "\": Ship type " + 
                    "must be Submarine (S) or Fighter Jet (F)" )
            ENDIF
        ENDTRY
        CATCH IllegalArgument
            FAIL (IllegalArgument) (message: " for " + THROWN MESSAGE )  
            // All errors from setter methods methods are thrown as
            // IllegalArgumentException. At each level, detail is added to
            // the messages before they are eventually output to the user
            // in a well formatted and useful way. Eg. load() adds info
            // about the line number.
        CATCH ArrayOutOfBounds
            FAIL (IllegalArgument) (message:  
                ": Less than 7 comma seperated values on line" )
            // If there are not enough values in a line
        ENDCATCH
    END SUBMODULE

    SUBMODULE: save
    IMPORT: fileName (String), Ships (ShipStorage)
    EXPORT: message (String)
    ASSERTION: Saves all ships in storage to file
    ALGORITHM:
        TRY
            OPEN FILE fileName
            fileArr := NEW ARRAY OF String SIZE OF Ships.getShipNum<--none

            FOR i := 0 TO Ships.getShipNum<--none INC 1
                WRITE TO FILE (Ships.getShip<--i).toFileString<--none
            ENDFOR
                CLOSE FILE
            message (String) := ( "Saved " + Ships.getShipNum<--none + 
                " ships to " + fileName )
        ENDTRY
        CATCH IOException
            IF FILE OPEN THEN
                TRY
                    CLOSE FILE
                ENDTRY
                CATCH IOException
                    message := ( "Error: Unknown error (Sorry). Messages: \""
                        + THROWN MESSAGE + "\", \"" + THROWN MESSAGE + "\"" )
                ENDCATCH
                message := ( "Error: Unknown error (Sorry). Message: \"" +
                    THROWN MESSAGE + "\"" )
            ELSE
                message := ( "Error: Unknown error (Sorry). Message: \"" +
                    THROWN MESSAGE + "\"" )
            ENDIF
        ENDCATCH
    END SUBMODULE

END CLASS
