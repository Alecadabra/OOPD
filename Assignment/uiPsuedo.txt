Author: Alec Maughan
Purpose: All user interface for ShipManager, user input and output
Date: 9/5/19

CLASS: UI

    CLASS CONSTANTS:
        MAXCHARS (integer) := 68 //Max. no. of characters per line
        //ANSI Colours:
        CYLW (String) := ANSI YELLOW
        CCYN (String) := ANSI CYAN
        CRED (String) := ANSI RED
        CC (String) := ANSI RESET COLOUR
        //New line 'starters':
        UIDOT (String) := "[-]" //Message
        UITAB (String) := " | " //Continuing lines/empty lines
        UIERR (String) := CRED + "[!]" + CC //Error messages
        UIINP (String) := CYLW + "[>]" + CC //Prompts for input
        //Utility 'headings':
        UIM (String) := NEWLINE + CCYN + "[M]" + CC + 
            "  -  -  -  -  -  -  -  -  -  - " + CCYN + "[ Menu ]" + CC + 
            " -  -  -  -  -  -  -  -  -  -  " + CCYN + "[M]" + CC + 
            NEWLINE + UITAB + NEWLINE
        UIL (String) := NEWLINE + CCYN + "[L]" + CC + 
            "  -  -  -  -  -  -  -  -  - " + CCYN + "[ Load Ships ]" + CC + 
            " -  -  -  -  -  -  -  -  -  [L]" + NEWLINE + UITAB + NEWLINE
        UIS (String) := NEWLINE + CCYN + "[S]" + CC + 
            "  -  -  -  -  -  -  -  -  - " + CCYN + "[ Save Ships ]" + CC + 
            " -  -  -  -  -  -  -  -  -  " + CCYN + "[S]" + CC + NEWLINE + 
            UITAB + NEWLINE
        UIN (String) := NEWLINE + CCYN + "[N]" + CC + 
            "  -  -  -  -  -  -  -  -  -  " + CCYN + "[ New Ship ]" + CC + 
            "  -  -  -  -  -  -  -  -  -  " + CCYN + "[N]" + CC + NEWLINE + 
            UITAB + NEWLINE
        UIV (String) := NEWLINE + CCYN + "[V]" + CC + 
            "  -  -  -  -  -  -  -  -  - " + CCYN + "[ View Ships ]" + CC + 
            " -  -  -  -  -  -  -  -  -  " + CCYN + "[V]" + CC + NEWLINE + 
            UITAB + NEWLINE
        UID (String) := NEWLINE + CCYN + "[D]" + CC + 
            "  -  -  -  -  -  -  - " + CCYN + "[ Destination Calculator ]" + 
            CC + " -  -  -  -  -  -  -  " + CCYN + "[D]" + CC + NEWLINE + 
            UITAB + NEWLINE
        UIF (String) := NEWLINE + CCYN + "[F]" + CC + 
            "  -  -  -  -  -  -  -  -  - " + CCYN + "[ Duplicates ]" + CC + 
            " -  -  -  -  -  -  -  -  -  " + CCYN + "[F]" + CC + NEWLINE + 
            UITAB + NEWLINE

    PRIVATE CLASS FIELDS:
        Ships ShipStorage

    DEFAULT CONSTRUCTOR
    IMPORT: none
    EXPORT: memory address of new UI object
    ASSERTION: Initialises Ships Object
    ALGORITHM:
        CONSTRUCT Ships USING default
    END SUBMODULE

    SUBMODULE: mainMenu
    IMPORT: none
    EXPORT: none
    ASSERTION: Calls display methods for title and menu and calls utility
        methods based on user input from inputMenu or returned menu
        option from a utility
    ALGORITHM:
        menu (char) := 'M'
            //userMenu for main menu input, menu returns input from a util
        WHILE menu NOT EQUALS 'E'
            IF menu EQUALS 'M' THEN
                //If showing the main menu
                displayTitle<--none
                displayMenu<--none
                menu := inputMenu<--"Please select an option:"
            ENDIF
            IF menu NOT EQUALS 'E' THEN
                //If not exiting the program
                displayTitle<--none
            ENDIF
            //Utility submodules loadShips,viewShips etc return a menu option
            CASE menu
                'L':
                    //Load ships from file
                    OUTPUT UIL
                    menu := loadShips<--none
                'S':
                    //Save ships to file
                    OUTPUT UIS
                    menu := saveShips<--none
                'N':
                    // Create a new ship from user input
                    OUTPUT UIN
                    menu := createShip<--none
                'V':
                    // Diplay all stored ships
                    OUTPUT UIV
                    menu := viewShips<--none
                'D':
                    // Destination calculation stub
                    OUTPUT UID
                    menu := destination<--none
                'F':
                    // Display duplicate ships
                    OUTPUT UIF
                    menu := duplicates<--none
                'E':
                    // Exit program
            END CASE
        END WHILE
        displayClear<--none
            //Clears terminal screen
    END SUBMODULE
        
    SUBMODULE: inputMenu
    IMPORT: message (String)
    EXPORT: menu (char)
    ASSERTION: Gets a user input char either l,s,n,v,d,f,e,m either upper or 
        lower case
    ALGORITHM:
        menu (char) := '0'
        inString (String)
        loop (boolean) := false

        DO
            OUTPUT CYLW + UIDOT + CC + " " + message + NEWLINE + UIINP + " "
            INPUT inString
                //printInp not used as the ANSI colour strings in some
                //messages make the line splitter think lines are longer
                //than they actually are
            IF NOT inString.equals<--"" THEN
                CASE inString.toUpperCase<--none.charAt<--0
                    'L': 'S': 'N': 'V': 'D': 'F': 'E': 'M':
                        menu := inString.toUpperCase<--none.charAt<--0
                            // Sets output char to first letter in String
                            // if letter is valid
                        loop := false
                    default:
                        printErr( "Error: Invalid menu selection \"" +
                            inString + "\"" )
                        loop := true
                ENDCASE
            ELSE 
                CLEAR INPUT BUFFER
                printErr( "Error: Menu selection cannot be empty" )
                loop := true
            ENDIF
        WHILE loop
    END SUBMODULE

    PRINTING SUBMODULES:
    SUBMODULE: print
    IMPORT: printString
    EXPORT: none
    ASSERTION: Prints to the terminal
        OUTPUT splitLine<--( printString + NEWLINE ), UIDOT, UITAB
    END SUBMODULE
 
    SUBMODULE: printInp
    IMPORT: printString
    EXPORT: outString (String)
    ASSERTION: Prints to the terminal with user input on next line
    ALGORITHM:
        OUTPUT splitLine<--( printString + NEWLINE + UIINP ),
            ( CYLW + UIDOT + CC ), ( CYLW + UITAB + CC ) ) + " " )
        INPUT outString
    END SUBMODULE

    SUBMODULE: printErr
    IMPORT: printString
    EXPORT: none
    ASSERTION: Prints an error to the terminal
    ALGORITHM:
            OUTPUT splitLine<--( printString + NEWLINE ), UIERR,
            ( CRED + UITAB + CC )
    END SUBMODULE

    SUBMODULE: printLine
    IMPORT: none
    EXPORT: none
    ASSERTION: Prints a line breaker (" | ") to the terminal
    ALGORITHM:
            OUTPUT UITAB + NEWLINE
    END SUBMODULE

    SUBMODULE: splitLine
    IMPORT: text (String), first (String), second (String)
    EXPORT: outText
    ASSERTION: Splits a String into multiple lines to fit the text into
        designated program area
    ALGORITHM:
        //first (String) is first line starter to use (Generally "[-]")
        //second (String) is line starter after that (Generally" | ")
        words (ARRAY OF String) := text.split<--" "
            //Array of each word in imported String
        numLetters := NEW ARRAY OF integer SIZE OF words.LENGTH
            //Array of number of letters in each word in words array
        outText (String) := first
            //Final text to export
        lineChars (integer) := 0
            //No. of characters in curent line

        FOR k := 0 TO words.LENGTH INC 1
            //Checks if any words are longer than the maximum
            IF words[k].length<--none >= MAXCHARS THEN
                longWord (String) := words[k]
                words[k] := ""
                FOR l := 0 TO MAXCHARS - 4 INC 1
                    words[k] += longWord.charAt<--l
                ENDFOR
                words[k] += "..." + NEWLINE
                //Truncates word and adds "..." to end
            ENDIF
        ENDFOR

        FOR i := 0 TO words.LENGTH INC 1
            //Sets each element in array to no. of chars in corresponding word
            numLetters[i] := words[i].length<--none
            /*
            // Not used in program
            IF words[i].contains<--ANSI COLOUR THEN
                //If words has ANSI colours, ignore their length
                numLetters[i] := numLetters[i] - 10
            ENDIF
            */
        ENDFOR

        //Creating lines
        FOR j := 0 TO words.LENGTH INC 1
            IF words[j].equals<--NEWLINE THEN
                //If current word is a newline
                outText := outText + NEWLINE + second
                lineChars := numLetters[j]
            ELSE IF lineChars + numLetters[j] < MAXCHARS
                //If adding the no. of characters in the current word to the
                //line will not exceed the max no. of chars per line
                lineChars := lineChars + numLetters[j] + 1
                outText := outText + " " + words[j]
            ELSE 
                //If adding the no. of characters in the current word to the
                //line WILL exceed the max no. of chars per line
                outText := outText + NEWLINE + second + " " + words[j]
                lineChars := numLetters[j]
            ENDIF
        ENDFOR
    END SUBMODULE
    END DISPLAY SUBMODULES

    UTILITY SUBMODULES:
    SUBMODULE: createShip
    IMPORT: none
    EXPORT: menu (char)
    ASSERTION: creates new sub or jet from user input and adds to respective 
        array in Ships
    ALGORITHM:
        type (String)
            //Ship type, 'S' for Submarine, 'J' or 'F' for Jet
        num (integer) := 0
            //Keeps track of type of ship and current classfield in question
            //First digit is 1 for submarines or 2 for fighter jets
            //Second digit is the classfield, eg 1 is serial, 4 is fuel
        CONSTRUCT sub (SubClass) USING default
        CONSTRUCT subEng (EngineClass) USING default
        CONSTRUCT jet (JetClass) USING default
        CONSTRUCT jetEng (EngineClass) USING default

        IF Ships.getSlots<--none EQUALS 0 THEN
            //If there are no ship slots left
            print<--"You cannot add another ship as there are no ship " +
                "slots left. (Max := " + Ships.MAXSHIPS + ")"
            printLine<--none
        ELSE 
            type := printInp<--( "Enter ship type" ).toUpperCase<--none
            WHILE NOT type.equals<--"S" AND NOT type.equals<--"F"
                IF type.equals<--"" THEN
                    //If input is empty
                    printErr<--
                        "Error with ship type \"\": Ship type cannot be empty" 
                ELSE 
                    //If input is something other than S or F
                    printErr<--"Error with ship type \"" + type + 
                        "\": Ship type must be Submarine (S) or Fighter " +
                        "Jet (F)"
                ENDIF
                type := printInp<--( "Enter ship type" ).toUpperCase<--none
            ENDWHILE
            printLine<--none

            IF type.equals<--"S" THEN
                num := 11
            ELSE IF type.equals<--"F" THEN
                num := 21
            ENDIF
        ENDIF

        WHILE ( num <= 17 AND num >= 10 ) OR ( num <= 27 AND num >= 20 ) )
            TRY
                CASE num
                    11:
                        //Input serial number for sub
                        sub.setSerial<--( printInp<--( 
                            "Enter serial number" ) )
                    21:
                        //Input serial number for jet
                        jet.setSerial<--( printInp<--( 
                            "Enter serial number" ) )
                    12:
                        //Input manufacturing year for sub
                        sub.setYear<--( printInp<--( 
                            "Enter manufacturing year" ) )
                    22:
                        //Input manufacturing year for jet
                        jet.setYear<--( printInp<--( 
                            "Enter manufacturing year" ) )
                    13:
                        //Input number of cylinders for sub
                        subEng.setCyl<--( printInp<--( 
                            "Enter number of cylinders" ) )
                    23:
                        //Input number of cylinders for jet
                        jetEng.setCyl<--( printInp<--( 
                            "Enter number of cylinders" ) )
                    14:
                        //Input fuel type for sub
                        subEng.setFuel<--( printInp<--( 
                            "Enter fuel type" ) )
                    24:
                        //Input fuel type for jet
                        jetEng.setFuel<--( printInp<--( 
                            "Enter fuel type" ) )
                    15:
                        //Input hull material
                        sub.setHull<--( printInp<--( 
                            "Enter hull material" ) )
                    16:
                        //Input max depth
                        sub.setDepth<--( printInp<--( "Enter max depth" ) )
                    25:
                        //Input wing span
                        jet.setWing<--( printInp<--( "Enter wing span" ) )
                    26:
                        //Input ordnance
                        jet.setOrdnance<--( printInp<--( "Enter ordnance" ) )
                    17: //Add sub to storage
                        sub.setEng<--subEng //Sets engine of the ship
                        Ships.addShip<--sub //Adds the ship to storage
                        print<--"Ship " + sub.getSerial<--none + 
                            " added successfully. " + 
                            Ships.slotsToString<--none
                    27: //Add jet to storage
                        jet.setEng<--jetEng //Sets engine of the ship
                        Ships.addShip<--jet //Adds the ship to storage
                        print<--"Ship " + jet.getSerial<--none + 
                            " added successfully. " + 
                            Ships.slotsToString<--none
                    default:
                        //Error
                        num := 30
                        printErr<--"Error: Unknown error (Sorry)"
                END CASE
                num = num + 1
                printLine<--none
                    //Increments the number to set the next element of ship
            ENDTRY
            CATCH IllegalArgument
                printErr<--"Error with " + THROWN MESSAGE
                    //The setters throw IllegalArguments with
                    //messages that make sense when added to this message
            ENDCATCH
        ENDWHILE

        menu (char) := inputMenu( "Please select: " + NEWLINE + CYLW + UITAB + 
            " N" + CC + "ew ship, " + CYLW + "M" + CC + "ain menu, " + CYLW + 
            "E" + CC + "xit program" )
    END SUBMODULE

    SUBMODULE: loadShips
    IMPORT: none
    EXPORT: menu (char)
    ASSERTION: Gets a file name and uses file.load to load ships into 
        storage from a file
    ALGORITHM:
        CONSTRUCT file (File) USING default //FileIO object
        fileName (String) := ""
        message String:= "" //Final message returned from file.load
        messageArr := NEW ARRAY OF String 
            //Array of returned messages from file.load

        fileName := printInp<--"Enter file name to load ships from"
        WHILE fileName.equals<--""
            printErr<--"Error: File name cannot be empty"
            fileName := printInp<--"Enter file name to load ships from"
            //Looping input validation for empty input
        ENDWHILE

        message := file.load<--fileName, Ships
            //Imports filename and ShipStorage obj. file.load method
            //returns a message String depending on what happened

        printLine<--none
        IF NOT message.contains<--NEWLINE THEN
            //If file.load returns no errors
            print<--message
            printLine<--none
        ELSE 
            messageArr := message.split<--NEWLINE
            FOR i := 0 TO messageArr.LENGTH INC 1
                IF messageArr[i].contains<--"Error" THEN
                    printErr<--messageArr[i]
                ELSE 
                    print<--messageArr[i]
                ENDIF
                printLine<--none
            ENDFOR
        ENDIF

        menu (char) := inputMenu<--"Please select: " + NEWLINE + CYLW + 
            UITAB + " L" + CC + "oad another file, " + CYLW + "V" + CC + 
            "iew ships, " + CYLW + "M" + CC + "ain menu, " + CYLW + "E" + 
            CC + "xit program"
   END SUBMODULE

    SUBMODULE: saveShips
    IMPORT: none
    EXPORT: menu (char)
    ASSERTION: Gets a file name and uses file.save<--none to save all ships
        in storage to file
    ALGORITHM:
        CONSTRUCT file (File) USING default //FileIO Object
        message (String) := "" //Message returned by file.save
        fileName (String) := ""

        fileName := printInp<--"Enter file name to save ships to"
        WHILE fileName.equals<--""
            printErr<--"Error: File name cannot be empty"
            fileName := printInp<--"Enter file name to save ships to"
        ENDWHILE

        message := file.save<--fileName, Ships
            //file.load returns a message based on what happened
        IF message.contains<--"Error" THEN
            printErr<--message
        ELSE 
            print<--message
        ENDIF
        printLine<--none

        menu (char) := inputMenu<--"Please select: " + NEWLINE" + CYLW + 
            UITAB + " V" + CC + "iew ships, " + CYLW + "M" + CC + 
            "ain menu, " + CYLW + "E" + CC + "xit program"
    END SUBMODULE

    SUBMODULE: viewShips
    IMPORT: none
    EXPORT: menu (char)
    ASSERTION: Prints all ship's .toString<--none's
        FOR i := 0 TO Ships.getShipNum<--none INC 1
            print<--Ships.getShip(i).toString<--none
                //getShip returns a copy of the ship at an index
            printLine<--none
        ENDFOR

        IF Ships.getShipNum<--none EQUALS 0 THEN
            // If there are no ships in storage
            print<--"No ships in storage. " + Ships.slotsToString<--none
        ELSE 
            // If there were ships in storage
            print<--Ships.slotsToString<--none
        ENDIF
        printLine<--none

        menu (char) := inputMenu<--"Please select: " + NEWLINE + CYLW + 
            UITAB + " F" + CC + "ind Duplicates, " + CYLW + "M" + CC + 
            "ain menu, " + CYLW + "E" + CC + "xit program"
    END SUBMODULE

    SUBMODULE: duplicates
    IMPORT: none
    EXPORT: menu (char)
    ASSERTION: Makes a long String of all ship duplicates using the 
        findDuplicates method in ShipStorage
    ALGORITHM:
        dupeArr (ARRAY OF ShipClass) := Ships.findDuplicates<--none
        i (integer) := 0 //Index used for while loop for outputting dupes
        IF Ships.getShipNum<--none EQUALS 0 THEN
            //If there are no ships in storage
            print<--"No ships in storage"
        ELSE IF dupeArr[0] EQUALS NULL THEN
            //If there are ships in storage but no duplicates
            print<--"Checked " + Ships.getShipNum<--none +
                " ships. No duplicates found"
        ELSE 
            //If there are ships in storage and there are duplicates
            print<--"Checked " + Ships.getShipNum<--none + 
                " ships. Duplicates:"

            WHILE ( i < dupeArr.LENGTH ) AND ( dupeArr[i] NOT NULL )
                printLine<--none
                print<--dupeArr[i].toString<--none
                i = i + 1
            ENDWHILE
        ENDIF
        printLine<--none

        menu (char) := inputMenu<--"Please select: " + NEWLINE + CYLW + 
            UITAB + " V" + CC + "iew ships, " + CYLW + "M" + CC + 
            "ain menu, " + CYLW + "E" + CC + "xit program"
     END SUBMODULE

    SUBMODULE: destination
    IMPORT: none
    EXPORT: menu (char)
    ASSERTION: Exports the ship that takes the shortest amount of time to 
        travel a distance using the destinationCheck method in ShipStorage
    ALGORITHM:
        input (String)
        loop (boolean) := false
        distance (integer) := 0
        IF Ships.getShipNum<--none NOT EQUAL 0 THEN
            DO
                input := printInp<--"Enter distance to travel (meters)"
                TRY
                    IF input.equals<--"" THEN
                        //If input is empty
                        printErr<--"Error: Distance cannot be empty"
                        loop := true
                    ELSE 
                        distance := (Convert to integer)(Parse to real)input
                        loop := false
                        IF distance <= 0 THEN
                            //If input is 0 or less
                            printErr<--"Error: Distance must be greater "
                                + "than 0 meters"
                            loop := true
                        ENDIF
                    ENDIF
                ENDTRY
                CATCH NumberFormat
                    //If input cannot be parsed to double
                    printErr<--"Error: Distance must be a real number"
                    loop := true
                ENDCATCH
            WHILE loop

            print<--Ships.destinationCheck<--distance
        ELSE 
            //If there are no ships in storage
            print( "There are no ships in storage" )
        ENDIF
        printLine<--none

        menu (char) := inputMenu( "Please select: " + NEWLINE + CYLW + 
            UITAB + " V" + CC + "iew ships, " + CYLW + "M" + CC + 
            "ain menu, " + CYLW + "E" + CC + "xit program"
    END SUBMODULE
    END UTILITY SUBMODULES

    DISPLAY SUBMODULES
    SUBMODULE: diplayMenu
    IMPORT: none
    EXPORT: none
    ASSERTION: Prints the main menu
    ALGORITHM:
        OUTPUT UIM +
            " |  [ " + CYLW + "L" + CC + " - Load Ships from a file ]        "
            + "[ " + CYLW + "S" + CC + " - Save ships to a file ]" + NEWLINE" +
            " |         [ " + CYLW + "N" + CC + " - New Ship ]               "
            + "   [ " + CYLW + "V" + CC + " - View all ships ]" + NEWLINE" +
            " |  [ " + CYLW + "D" + CC + " - Destination Calculator ]        "
            + "  [ " + CYLW + "F" + CC + " - Duplicate Finder ]" + NEWLINE" +
            " |           [ " + CYLW + "E" + CC + " - Exit ]" + NEWLINE" + 
            UITAB + NEWLINE
    END SUBMODULE

    SUBMODULE: displayClear
    IMPORT: none
    EXPORT: none
    ASSERTION: Clears the screen for program exit
    ALGORITHM:
        OUTPUT ANSI CLEAR TERMINAL
        OUTPUT ANSI MOVE CURSOR TOP LEFT
        //Clears the terminal and moves cursor to top left of terminal
    END SUBMODULE

    SUBMODULE: diplayCrash
    IMPORT: none
    EXPORT: none
    ASSERTION: Clears the screen for program exit and shows crash message
        for ShipManager class base Esception handling
    ALGORITHM:
            displayClear<--none
            OUTPUT UIERR + "Program encountered an unexpected error" + 
            NEWLINE
        //Clears the terminal, moves cursor to top left of terminal and
        //prints crash message
    END SUBMODULE

    SUBMODULE: displayTitle
    IMPORT: none
    EXPORT: none
    ASSERTION: Prints the title, version number is randomly generated lol
    ALGORITHM:
        version (String) := "v" + 
            ((Convert to integer)(Math.random<--none * 10)) + "." +
            ((Convert to integer)(Math.random<--none * 10)) +
            ((Convert to integer)(Math.random<--none * 10))) // "v#.##"
            //Random version number generation
        displayClear<--none
            //Clears the terminal and moves to upper left of screen
        OUTPUT
            "[ ]-----------------------------------------" +
            "-----------------------------[ ]" + NEWLINE +
            " |      _____ _     _        _  _           " +
            "                              |" + NEWLINE +
            " |     / ____| |__ |_|_ __  / \\/ \\  __ _ _" +
            " __   __ _  __ _  ___ _ __      |" + NEWLINE +
            " |     \\___ \\|  _ \\| |  _ \\| |\\/| |/ _ " +
            " |  _ \\ / _  |/ _  |/ _ \\  __|     |" + NEWLINE +
            " |      ___) | | | | | |_| | |  | | |_| | | " +
            "| | (_| | |_| |  __/ |        |" + NEWLINE +
            " |     |____/|_| |_|_|  __/|_|  |_|\\__,_|_|" +
            " |_|\\__,_|\\__  |\\___|_|        |" + NEWLINE +
            " |                   | |                    " +
            "          _/  |               |" + NEWLINE +
            " |                   |_|                    " +
            "         |___/          " + version + " |" + NEWLINE +
            "[ ]-----------------------------------------" +
            "-----------------------------[ ]" + NEWLINE
            )
            //"ShipManager" ascii art with version number
    END SUBMODULE
    END DISPLAY SUBMODULES

END CLASS
